apiVersion: v1
kind: Namespace
metadata:
  name: telegraf-operator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: telegraf-operator
  namespace: telegraf-operator
  labels:
    app: telegraf-operator
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: telegraf-operator
  labels:
    app: telegraf-operator
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: telegraf-operator
  labels:
    app: telegraf-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: telegraf-operator
subjects:
  - kind: ServiceAccount
    name: telegraf-operator
    namespace: telegraf-operator
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: telegraf-operator
  namespace: telegraf-operator
  labels:
    app: telegraf-operator
webhooks:
  - name: telegraf.influxdata.com
    # enable the example below to limit to namespaces with specific labels only
    # namespaceSelector:
    #   matchLabels:
    #     controller: telegraf-operator
    admissionReviewVersions: ["v1"]
    sideEffects: None
    clientConfig:
      service:
        name: telegraf-operator
        namespace: telegraf-operator
        path: "/mutate-v1-pod"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdIekNDQkFlZ0F3SUJBZ0lVQnBCMDJoYzAraFZwdlp4bnFLbmcyMk9OaENNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2daNHhDekFKQmdOVkJBWVRBazVNTVJVd0V3WURWUVFJREF4YWRXbGtJRWh2Ykd4aGJtUXhFakFRQmdOVgpCQWNNQ1ZKdmRIUmxjbVJoYlRFYU1CZ0dBMVVFQ2d3UlUzQmhjbXRzYVc1bklFNWxkSGR2Y21zeEZqQVVCZ05WCkJBc01EVWxVSUVSbGNHRnlkRzFsYm5ReE1EQXVCZ05WQkFNTUozUmxiR1ZuY21GbUxXOXdaWEpoZEc5eUxuUmwKYkdWbmNtRm1MVzl3WlhKaGRHOXlMbk4yWXpBZUZ3MHlNREF6TWpjeE5URXpOVEJhRncwek1EQXpNalV4TlRFegpOVEJhTUlHZU1Rc3dDUVlEVlFRR0V3Sk9UREVWTUJNR0ExVUVDQXdNV25WcFpDQkliMnhzWVc1a01SSXdFQVlEClZRUUhEQWxTYjNSMFpYSmtZVzB4R2pBWUJnTlZCQW9NRVZOd1lYSnJiR2x1WnlCT1pYUjNiM0pyTVJZd0ZBWUQKVlFRTERBMUpWQ0JFWlhCaGNuUnRaVzUwTVRBd0xnWURWUVFERENkMFpXeGxaM0poWmkxdmNHVnlZWFJ2Y2k1MApaV3hsWjNKaFppMXZjR1Z5WVhSdmNpNXpkbU13Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLCkFvSUNBUUN2NnNENExIRnFCV1hNUGdkN0lHNkV0bGg5S2w1UGV5SGlxR0V0WEorN29hOUQ2ZnJoZmczOUpHaVAKZ1lHREhqSi9wdDJMN0JEM1A5Q25URjluUks1VStWTTFIUzJ1SHdVRGs0WjgyOEdmMGtyeWVSK0NwdzQ2RGtqNwoyM2tIQmZ3Y0F1WmVIRHh0RU9nK3JhTTlxTzRHSjY0TjgxdVVoQllvbWloK0NmYzJpd2c3SW41V3FobnhGQlBkCnJNNUVZOSswMyttUjRRTHF1ZDNCN25lMmdINVpBcDNydXQxVFZTanBHSStaQTBsbHVVUUgzUjVkdzBacFk2NWUKVzdVZlpTMU1rMzNtZHppVnN5Wm1IZXgxNXVkcGJWbGJQa29wM3Jaeks0allFLzRZWmZBTy9YVzRndk1Bb3l6TwpzSkY2VnRxSGJoWEppRU5UZ28xZjdoNGpLNEh3SlgzWTV3Z0swRWtydHEwdVhIcmtqT3RVbk4zTFZXM3hEMmwyCnJwcW8wcVR0WEJOR1FMTEhVMlVNUERMNTUzeWJEcXorSGVpeC9KZFAyaG9tdGZSMGpBLzJBdU5Qd0tXUm1pRVIKNkFWTWgrNkZMMXRFRVVESEdVU09SQVhnU0ZjcGhKVXRreFVGNVI5dy9SU3psTXBoK3ZEZUh6NGdEVEpSR0lZUwpEejFJYVB5TDFLUWRlMlNFdis5TFZrK2FMWWRzWTh5cW9jeXN3QUkrbGg3YUx0ZWxSRkhoU3VMR1JQVEJMNTlKCnh1eHJ4WkFsMGdoTWx1enNEZ081SDlSeHN6dWRCM0wraGwzdlEvdURLcUhQQnJMT0ZtR2dWcHVhb0x5Z1NwRngKZkE1Z3kvR3J4bWpOWFdyZjVXeW9KV0J0dmhUaUk2WGQwdzRpY0dzV0xmNFJGUitGZndJREFRQUJvMU13VVRBZApCZ05WSFE0RUZnUVVuUnkzb3p6aGxxSXUwSWhib3k5c3lObEcwMFV3SHdZRFZSMGpCQmd3Rm9BVW5SeTNvenpoCmxxSXUwSWhib3k5c3lObEcwMFV3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0MKQWdFQWZrSW5wcTUxNm43N1VkekNrdW9SSnk5SnFHMmszbDhGNGc3dlAzN0VuZVRQK1JOeVJscjcxNTRDa2J2UQp6TmFHYSs4WklrNHVrbjcrek1LUnEzQmNrWlBOUU92NjRacWx4a3F6NkpldC9zNWZnSXQyNXgrTXpjdUMvUzdqCkIwdCtDOEdUYTRNcUc0cmF0ZW5Lc3N1NGhoUkpkUGdzVXBJNytQZ1BCcmlweHZsOGFZNGJKL3UrbWN4azFtTUsKazFXQ1hEb09vN3M2cVF0ZFcxeGpTYXU2MHFwS3l0L0IxcXdkNmhpUXNYWFRHV1E3cFB4UWxvanZDbDlsUlJCYgpHRGl4QWY5RTJ2TXlYYXBURDNsZXlOQ0UzOGtjSVpON1JEQ0J0b04zVFQzZzMyb096bStxQS8wNWk4bGpFZy9ICm0rdXV2MXFucnJ0OTh0YXphMVQ1R0dhQVVNUjErbEoyTDhQaFNxbGdhT1libGl4dFR0ejFadTRVWTNSQTBjREkKckdJd21JY0IwVFF2V1Q1eDRTbTVUNkYxeFBnNnJ2YzNBVHlQdTY5SmNZb04rWFI4TlF6K0JCYmRpamFZV092dwpzT29PQUJPVTU2dHFXUXlwQ0xhc2FzSFVKVnVUdzhyMDNIcExOYVVpZER4S2JwOThyRlhzMlFOUlFWZ1JpdjJWCk5ucGhlYXl1WFBOSXJPcGJzcENTa2dHcnYwQXhsOWg4dWlGRGZUYUV6OU5LdC8rSzI1Q0RCRmxWQ1lReVJyL00KTGZnc0svUTBhbnhNVy9UMVp3SXlvVTh1MmExdnExK1dDakhGTEpOTlpBRTFubWZXcm1ZcWdQdm9LclJJb3JoOAo4L2VoRHFqKzU1UDhvRUNDeTJVWHlENzdBV0tERmlxempRblphVFhmME52WXdocz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    rules:
      - operations: ["CREATE", "DELETE"]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["pods"]
    failurePolicy: Ignore
    reinvocationPolicy: IfNeeded
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telegraf-operator
  namespace: telegraf-operator
  labels:
    app: telegraf-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telegraf-operator
  template:
    metadata:
      labels:
        app: telegraf-operator
    spec:
      serviceAccountName: telegraf-operator
      containers:
        - name: controller
          image: quay.io/influxdb/telegraf-operator:latest
          # use IfNotPresent image pull policy to allow pushing / injecting
          # container images to Kubernetes directly (such as when using kind)
          imagePullPolicy: IfNotPresent
          args:
            # for development purposes, enable internal plugin to report
            # telegraf metrics even if no other data is available
            - --enable-default-internal-plugin=true
            # default class to use if not specified by the pod
            - --telegraf-default-class=basic
            - --telegraf-classes-directory=/config/classes
            # allow injecting telegraf-istio sidecar for pods with
            # istio sidecar annotations enabled
            - --enable-istio-injection=true
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: https
              containerPort: 9443
              protocol: TCP
          volumeMounts:
            - name: certs
              readOnly: true
              mountPath: "/etc/certs"
            - name: telegraf-operator-classes
              readOnly: true
              mountPath: "/config/classes"
      volumes:
        - name: certs
          secret:
            secretName: telegraf-operator-certs
        - name: telegraf-operator-classes
          secret:
            secretName: telegraf-operator-classes
---
apiVersion: v1
kind: Service
metadata:
  name: telegraf-operator
  namespace: telegraf-operator
  labels:
    app: telegraf-operator
spec:
  ports:
    - port: 443
      targetPort: 9443
      protocol: TCP
      name: https
  selector:
    app: telegraf-operator
---
apiVersion: v1
kind: Secret
metadata:
  name: telegraf-operator-certs
  namespace: telegraf-operator
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdIekNDQkFlZ0F3SUJBZ0lVQnBCMDJoYzAraFZwdlp4bnFLbmcyMk9OaENNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2daNHhDekFKQmdOVkJBWVRBazVNTVJVd0V3WURWUVFJREF4YWRXbGtJRWh2Ykd4aGJtUXhFakFRQmdOVgpCQWNNQ1ZKdmRIUmxjbVJoYlRFYU1CZ0dBMVVFQ2d3UlUzQmhjbXRzYVc1bklFNWxkSGR2Y21zeEZqQVVCZ05WCkJBc01EVWxVSUVSbGNHRnlkRzFsYm5ReE1EQXVCZ05WQkFNTUozUmxiR1ZuY21GbUxXOXdaWEpoZEc5eUxuUmwKYkdWbmNtRm1MVzl3WlhKaGRHOXlMbk4yWXpBZUZ3MHlNREF6TWpjeE5URXpOVEJhRncwek1EQXpNalV4TlRFegpOVEJhTUlHZU1Rc3dDUVlEVlFRR0V3Sk9UREVWTUJNR0ExVUVDQXdNV25WcFpDQkliMnhzWVc1a01SSXdFQVlEClZRUUhEQWxTYjNSMFpYSmtZVzB4R2pBWUJnTlZCQW9NRVZOd1lYSnJiR2x1WnlCT1pYUjNiM0pyTVJZd0ZBWUQKVlFRTERBMUpWQ0JFWlhCaGNuUnRaVzUwTVRBd0xnWURWUVFERENkMFpXeGxaM0poWmkxdmNHVnlZWFJ2Y2k1MApaV3hsWjNKaFppMXZjR1Z5WVhSdmNpNXpkbU13Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLCkFvSUNBUUN2NnNENExIRnFCV1hNUGdkN0lHNkV0bGg5S2w1UGV5SGlxR0V0WEorN29hOUQ2ZnJoZmczOUpHaVAKZ1lHREhqSi9wdDJMN0JEM1A5Q25URjluUks1VStWTTFIUzJ1SHdVRGs0WjgyOEdmMGtyeWVSK0NwdzQ2RGtqNwoyM2tIQmZ3Y0F1WmVIRHh0RU9nK3JhTTlxTzRHSjY0TjgxdVVoQllvbWloK0NmYzJpd2c3SW41V3FobnhGQlBkCnJNNUVZOSswMyttUjRRTHF1ZDNCN25lMmdINVpBcDNydXQxVFZTanBHSStaQTBsbHVVUUgzUjVkdzBacFk2NWUKVzdVZlpTMU1rMzNtZHppVnN5Wm1IZXgxNXVkcGJWbGJQa29wM3Jaeks0allFLzRZWmZBTy9YVzRndk1Bb3l6TwpzSkY2VnRxSGJoWEppRU5UZ28xZjdoNGpLNEh3SlgzWTV3Z0swRWtydHEwdVhIcmtqT3RVbk4zTFZXM3hEMmwyCnJwcW8wcVR0WEJOR1FMTEhVMlVNUERMNTUzeWJEcXorSGVpeC9KZFAyaG9tdGZSMGpBLzJBdU5Qd0tXUm1pRVIKNkFWTWgrNkZMMXRFRVVESEdVU09SQVhnU0ZjcGhKVXRreFVGNVI5dy9SU3psTXBoK3ZEZUh6NGdEVEpSR0lZUwpEejFJYVB5TDFLUWRlMlNFdis5TFZrK2FMWWRzWTh5cW9jeXN3QUkrbGg3YUx0ZWxSRkhoU3VMR1JQVEJMNTlKCnh1eHJ4WkFsMGdoTWx1enNEZ081SDlSeHN6dWRCM0wraGwzdlEvdURLcUhQQnJMT0ZtR2dWcHVhb0x5Z1NwRngKZkE1Z3kvR3J4bWpOWFdyZjVXeW9KV0J0dmhUaUk2WGQwdzRpY0dzV0xmNFJGUitGZndJREFRQUJvMU13VVRBZApCZ05WSFE0RUZnUVVuUnkzb3p6aGxxSXUwSWhib3k5c3lObEcwMFV3SHdZRFZSMGpCQmd3Rm9BVW5SeTNvenpoCmxxSXUwSWhib3k5c3lObEcwMFV3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0MKQWdFQWZrSW5wcTUxNm43N1VkekNrdW9SSnk5SnFHMmszbDhGNGc3dlAzN0VuZVRQK1JOeVJscjcxNTRDa2J2UQp6TmFHYSs4WklrNHVrbjcrek1LUnEzQmNrWlBOUU92NjRacWx4a3F6NkpldC9zNWZnSXQyNXgrTXpjdUMvUzdqCkIwdCtDOEdUYTRNcUc0cmF0ZW5Lc3N1NGhoUkpkUGdzVXBJNytQZ1BCcmlweHZsOGFZNGJKL3UrbWN4azFtTUsKazFXQ1hEb09vN3M2cVF0ZFcxeGpTYXU2MHFwS3l0L0IxcXdkNmhpUXNYWFRHV1E3cFB4UWxvanZDbDlsUlJCYgpHRGl4QWY5RTJ2TXlYYXBURDNsZXlOQ0UzOGtjSVpON1JEQ0J0b04zVFQzZzMyb096bStxQS8wNWk4bGpFZy9ICm0rdXV2MXFucnJ0OTh0YXphMVQ1R0dhQVVNUjErbEoyTDhQaFNxbGdhT1libGl4dFR0ejFadTRVWTNSQTBjREkKckdJd21JY0IwVFF2V1Q1eDRTbTVUNkYxeFBnNnJ2YzNBVHlQdTY5SmNZb04rWFI4TlF6K0JCYmRpamFZV092dwpzT29PQUJPVTU2dHFXUXlwQ0xhc2FzSFVKVnVUdzhyMDNIcExOYVVpZER4S2JwOThyRlhzMlFOUlFWZ1JpdjJWCk5ucGhlYXl1WFBOSXJPcGJzcENTa2dHcnYwQXhsOWg4dWlGRGZUYUV6OU5LdC8rSzI1Q0RCRmxWQ1lReVJyL00KTGZnc0svUTBhbnhNVy9UMVp3SXlvVTh1MmExdnExK1dDakhGTEpOTlpBRTFubWZXcm1ZcWdQdm9LclJJb3JoOAo4L2VoRHFqKzU1UDhvRUNDeTJVWHlENzdBV0tERmlxempRblphVFhmME52WXdocz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBcityQStDeHhhZ1ZsekQ0SGV5QnVoTFpZZlNwZVQzc2g0cWhoTFZ5ZnU2R3ZRK242CjRYNE4vU1JvajRHQmd4NHlmNmJkaSt3UTl6L1FwMHhmWjBTdVZQbFROUjB0cmg4RkE1T0dmTnZCbjlKSzhua2YKZ3FjT09nNUkrOXQ1QndYOEhBTG1YaHc4YlJEb1BxMmpQYWp1QmlldURmTmJsSVFXS0pvb2ZnbjNOb3NJT3lKKwpWcW9aOFJRVDNhek9SR1BmdE4vcGtlRUM2cm5kd2U1M3RvQitXUUtkNjdyZFUxVW82UmlQbVFOSlpibEVCOTBlClhjTkdhV091WGx1MUgyVXRUSk45NW5jNGxiTW1aaDNzZGVibmFXMVpXejVLS2Q2MmN5dUkyQlArR0dYd0R2MTEKdUlMekFLTXN6ckNSZWxiYWgyNFZ5WWhEVTRLTlgrNGVJeXVCOENWOTJPY0lDdEJKSzdhdExseDY1SXpyVkp6ZAp5MVZ0OFE5cGRxNmFxTktrN1Z3VFJrQ3l4MU5sRER3eStlZDhtdzZzL2gzb3NmeVhUOW9hSnJYMGRJd1A5Z0xqClQ4Q2xrWm9oRWVnRlRJZnVoUzliUkJGQXh4bEVqa1FGNEVoWEtZU1ZMWk1WQmVVZmNQMFVzNVRLWWZydzNoOCsKSUEweVVSaUdFZzg5U0dqOGk5U2tIWHRraEwvdlMxWlBtaTJIYkdQTXFxSE1yTUFDUHBZZTJpN1hwVVJSNFVyaQp4a1Qwd1MrZlNjYnNhOFdRSmRJSVRKYnM3QTREdVIvVWNiTTduUWR5L29aZDcwUDdneXFoendheXpoWmhvRmFiCm1xQzhvRXFSY1h3T1lNdnhxOFpvelYxcTMrVnNxQ1ZnYmI0VTRpT2wzZE1PSW5CckZpMytFUlVmaFg4Q0F3RUEKQVFLQ0FnRUFveE5hMlhUUm1qZnd1MXBSTXduSWlneERrWnhDR3lvSktvVnV1RTloMzkwdGpTYU5KSlhuUCtDTgpjV0xiZllIenpEUVNzcEFlMWlWNU5tMXREMTB5d3FEeVNvMkcrQi9YVlE1Z0lNVFRCR1k4aGZSVWlwaDBic3NwClN4aVVaRGRmRTFSNDI0c1BWUWZVVTY1QllucUVWSDVhTXFLREpmVWdXWGsyeWtoUXZHWThOaDF1d3NZakVFSE4KZkxTaDdmSXJ3Zy9FQlRCeXRNZWlWQkhOTmdoOWwrUCtJelZ4MEx0a0ZsbG5YTEFZVFUxbVRHZmxxNFBIZFJFcgo1bHJiVjRSQ2J2ZFhRZHNKUUhUM3hyZzhxTHRwa0drRzZiZWZwcHJIeFpINDVGMzhNZi9sZnUvbFBpdGVPeHdKCkFIM2NEbTRQWEhabmloQmdZVHpuODZMWW16L016aGZUclhScmd4dG93bFFaOHZ6Q09NcVJqVzVTR0xiWGRWbjYKQ1c2bjkzMDN5YUlzRjNpMUNwaVRqWXF3ZHlYcWNDTlk0SGtLa1grQS8yc0srRi9KREFvVGlsUmZuY0U4SW1PUAoxR0dibXJSTHNNZTA0dG1TZUp1dGRrUjlRSVBIUWZPUWMvUC9mOVZvVVhjMjNsR21rb3E4ZjNhV1JweUdOV202ClpyZzJlbitQdENSRklBVXZkT3VDY0puZGg0NXlsYndXWmR4Y0JsYWRpbjBLS2pMaGRiU09weXNSNjRIbDFZcG4KSmcrT0x4eVh4cHRXaW5vU3RLWTYvYWtZS2tUZzk1aTE4R3ovME10c0wyQzVjY2R5SkE5VFZ1dy9YaDlBNmZCQgppTFByL0pFTFkwbzNGSnlQYWZDSUJUUVBXS284WS82R1dDbW9Mc1ppTk1Eemh1dzluOEVDZ2dFQkFPaExHMEpJClY2cmx4RkpESjZXUkJhRTYyRDA3K3h6UGx3UjQxekIrWUVvNTdhUG1PNWE1YWhJZHBFUkF4bU1yRTZwMi95WEoKT3paM2NwMDEyYkc3Z1BoaGtYNVRCNkNyalV1TWlLTmE5S0x0enVmUmkyTkpyWFluWFdoYitkbmlsbnQrcE1SeQo0bFk1Q3BUc1F1RzZuRXQ5TE1QTm02TEhyMVRKQ1ozUmpFTGFoendGdWlENG0zdWhiM01ZU1dEaGFiMHBWUTdYCngwY0NiaENTTkJPSkwwcUQrVjBlRXFKZklZMFFtTGhPN2tBbGhmclc1ZE9mMzNKaDY5VXJtUExVMHpOR0s1SHMKa0E0RUZkdWpiRVJnUm1NUmp3cC8vVGxiSm93Z3FRYU1HMnN3azJCOHdsZlhGMGhVUENUMitZYUVHTk9UNStyRwpJOS9nWkcvSERnY3JrWjhDZ2dFQkFNSGV3a2MrdjFML3RQUzQ4aUNQaDNibkpyaHp3OVpOUlBBeWw2QjBrZVgyCmVjd1E3KzJvYmNtTEsvUnVpS2l5bzdhVDQyVUMySXZKYVF2OEtGUCsvTVpwcU8vNUlmMmtwOVFOQjVNVmY2QngKWHhZT2tqdzZ5aU9vejRMdGVPdFlMY1phUmVQdnMrWEZUaldHRTZHemh3ZUF3MXV0TlNGR1FTc0lHNnIvUk9nNgpNcWxPOGNUMDVIYVhCS2VXRmdlbEl5aE4xQkdTcUZITWlFaEhPdC9GZVBSeWRKUGZBcGYvZlNQVVEzSDNmVjIrCmhBaUtPNlFDTnEvaWowK01YQ2R0Y3NrNXRZOU1ZMjZZZTV4TDJxUkZIN2dhSnJKV1Zpck5vbGZPd2s4bThIeW4KYUJ1VXRvN1pmNk83ZG5TbXF6UllrK2RHc1hSVlV6SXgreDhHZjhtbVFDRUNnZ0VBUWxkNDhJUXlyWGN6aTM3cwphc2V4UU92S2FDcWlQQWM1alNocDVNcWkrMi94NDdaVVhHYVYyWmlubW1xWmZpY0dWYy9vYk1VODZRQlNObjN6CnIyUHFvSVZWQlN2M2FMYTJBdGFmQzNCbG44YWxLZVhabGtDcmpxd05iRW1nWU03cXhWaFUvRm9ITkRMVVI5WDEKLy92SXVYS0ZmMkpRU2J3WDRmSU1rZ3NQc09ReWJUMEJmSHNrQkxvRlYyeWZRRkVBWHVyWUJRWXhQcUYrQjdPSgp0ZTZmRi92N0V0SU01bHllKzJlN0JpQmN3T3MyaVg0b1l6a3Ntc0ZHbGpuK1U1UGV3YTBQc254S1pBWmNxNzdQCm8vT1BCcW8wSFA2U3RuZkcyWXhXV2ExWUExUDdNenBPVXNIMlAwejNaR000dm1jcG8vdUE1N2N3OWJaaldOMFQKcjQ2TTV3S0NBUUJrYTltZ2c5MGd4ZmxheGk0Tk5hdUtxS05DNmh3bjluQmVKeWFwWTVoclVPZTRENUhvUGRWWQpqM0ZlTko4dkd4RjRNbFNZYndmeUtJcjBQVkk2YUJ0UlAwdlZ1ZXVrY2RUSkgxS3NHbmU0aU9FakVMc28zWjcxCko2ME5lYXFuNVU0WXI0d0NUSmlYelVMOHNJMmN0ZHljdzFMdU91TUpjRld6VDRqZFkwcXpLK293RHdkbTZSOHEKV29GN3VWK0I2RVUwekZPc0lwWnpnSW1iUHVJOUpSSEpOVHd6bUZIRW4vK1hQbzBOREpCd3JZM0F5ckduKzhtTwpBOElPQjN0NHBOWFBhOGdqQ1FOOE54bllWT1pWTHNVR1hPMXNkUkkvSzdNSzNydUJ1bjdaWXZHblQ3bmNkc2NKCjdjR25IT29UdkVvb2cxTEtHcVIwbkxVaVZnQjlXRk5oQW9JQkFCR21ISncrWkJJRFNqV2Y5MmRwU1BOZG15bzQKRDFGTStUNmVROHlDZUR0R0hhSndadU14VUlyU3ZsNTUzemtQd1ZNMVFkOGNsMDBHTGNKL2dBYW9EV3ZwU3dZKwpaRy9WQzloV1VkWFIvR2NGZmJMUWhtUDA5K0dac01zaTlQMUFvenV0TExsc2QxL1VxREFhajAvYStnVXhtNGM3CnRFK3FjdG9pOXFaY1QwbXRWMGVLYXNUSDBRTXRIWnMvRkNHcU1yZzZlSGQwSDFGOTF4ZVNVOU52V2xPeVZ2bmMKUWVwRUg2YnhZSlYzU2tqTm43M0tja0lCQ3R0Q0tOL1ZES3VOYmhpWWZydmxHVkx6VStjdkVZOUNrTGZTTHJvbgpRSUE1azhzam0rL1QwOFRrblNaK2NoR2dCZU5Ld1NUQk1iN1V3dUV0LzlTS3c1d3pacmY0MXc4U21qYz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
type: kubernetes.io/tls
